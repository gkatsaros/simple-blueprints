
tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.3/types.yaml
  - plugin:cloudify-openstack-plugin
  - plugin:cloudify-utilities-plugin

inputs:

  webserver_port:
    description: The HTTP web server port
    default: 8080

  agent_key_private:
    description: >
      The content of the agent's private key.
    default: { get_secret: agent_key_private }

  agent_key_public:
    description: >
      The content of the agent's public key.
    default: { get_secret: agent_key_public }

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ubuntu

  image:
    description: >
      An Openstack Image ID. Tested with a Ubuntu 14.04 image.
    type: string
    default: { get_secret: ubuntu_trusty_image }

  flavor:
    description: >
      An Openstack Flavor ID.
    default: '2'

  orchestration-network-id:
    description: >
      The Netwrok ID for the orchestration mgt network.
    default: 'c97554d5-6538-4615-bbcf-e7ec8cfa7d3c'

  orchestration-subnet-id:
    description: >
      The Subnet ID for the orchestration mgt network.
    default: '3e58e4e4-5130-476e-b65a-0e1ef78dd6cf'

  floating-network-id:
    description: >
      The Netwrok ID for the floating external network.
    default: 'c6497136-6f9f-4314-bb27-f96b49a41707'

  security-group-id:
    description: >
      The ID of the security group that you want for the VM.
    default: '779b2c1e-15c6-406c-a068-61f59ad10c18'


dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_secret: keystone_region }

node_templates:

  http_web_server:
    type: cloudify.nodes.WebServer
    properties:
      port: { get_input: webserver_port }
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/configure.sh
        start: scripts/start.sh
        stop: scripts/stop.sh

  host:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_config
      agent_config:
        #network: { get_input: manager_network }
        user: { get_input: agent_user }
        install_method: init_script
        port: 22
        key: { get_input: agent_key_private }
      server:
        meta:
          blueprint_version: v1
        key_name: ''
        image: { get_input: image }
        flavor: { get_input: flavor }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstack.nova_plugin.server.create
          inputs:
            args:
              meta:
                blueprint_version: v1
              image: { get_input: image }
              flavor: { get_input: flavor }
              userdata: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: orch-network
    - type: cloudify.openstack.server_connected_to_port
      target: orch-port
    - type: cloudify.relationships.depends_on
      target: cloudify_host_cloud_config


  orch-port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: orch-network
    - type: cloudify.relationships.depends_on
      target: orch-subnet
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group
    - type: cloudify.openstack.port_connected_to_floating_ip
      target: ip

  orch-subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: orchestration-subnet-id }
    relationships:
    - type: cloudify.relationships.contained_in
      target: orch-network

  orch-network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: orchestration-network-id }
    relationships:

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: security-group-id }
    relationships:

  ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_id: { get_input: floating-network-id }
    relationships:


  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        manage_etc_hosts: True
        users:
          - name: { get_input: agent_user }
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            ssh-authorized-keys:
              - { get_input: agent_key_public }


outputs:

  endpoint:
    description: Web application endpoint
    value:
      concat:
      - 'http://'
      - { get_attribute: [ip, floating_ip_address] }
      - ':'
      - { get_input: webserver_port }
      - '/'
